<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageResizer.Plugins.Watermark</name>
    </assembly>
    <members>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.Computation">
            <summary>
                Computes an (expiring) boolean result for whether the software is licensed for the functionality installed on the
                Config, and the license data instantly available
                Transient issues are stored within the class; permanent issues are stored in the  provided sink
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.Computation.DefaultNetworkGraceMinutes">
            <summary>
                If a placeholder license doesn't specify NetworkGraceMinutes, we use this value.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.Computation.GetGracePeriodFor(ImageResizer.Plugins.Licensing.ILicenseChain)">
            <summary>
                Pending licenses can offer grace periods. Logs a local issue; trusts the instance (and issue) will be cleared
                when the returned DateTime passes. May subdivide a grace period for more granular issue text.
            </summary>
            <param name="chain"></param>
            <returns></returns>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.DomainLookup.LookupTableLimit">
            <summary>
                Limit the growth of the lookup table cache
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.DomainLookup.customMappings">
            <summary>
                Retained for diagnostics purposes; this data is also in LookupTable
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.DomainLookup.suffixSearchList">
            <summary>
                Used to locate a domain when it's not cached in lookupTable
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.DomainLookup.FindKnownDomain(System.String)">
            <summary>
                Returns null if there is no match or higher-level known domain.
            </summary>
            <param name="similarDomain"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.DomainLookup.TrimLowerInvariant(System.String)">
            <summary>
                Only cleans up string if require; otherwise an identity function
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.LicenseChain">
            <summary>
                A chain of licenses can consist of
                a) 1 or more offline-domain licenses that may or may not enable different feature codes
                b) 1 or more ID licenses, and (optionally) a cached OR remote license for that ID
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.dict">
            <summary>
                Key is a hash of the license signature
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.licenseServerStack">
            <summary>
                License Servers
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.cache">
            <summary>
                Cache for .Licenses()
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.fetcher">
            <summary>
                The current fetcher. Invalidated when URLs are changed
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.remoteLicense">
            <summary>
                The fresh/local (not from cache) remote license
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseChain.Last200">
            <summary>
                The last time when we got the HTTP response.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseChain.FetchedLicense">
            <summary>
                Returns null until a fresh license has been fetched (within process lifetime)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseChain.TryUpdateLicenseServersInfo(ImageResizer.Plugins.Licensing.ILicenseBlob)">
            <summary>
                Returns false if the blob is null,
                if there were no license servers in the blob,
                or if the servers were identical to what we already have.
            </summary>
            <param name="blob"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseChain.Add(ImageResizer.Plugins.LicenseVerifier.LicenseBlob)">
            <summary>
                We have a layer of caching by string. This does not need to be fast.
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1">
            <summary>
                Responsible for displaying a red dot when licensing has failed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1.PermanentIssueSink">
            <summary>
            If null, c.configurationSectionIssues is used
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1.ShouldWatermark">
            <summary>
            Raises an exception if LicenseError == LicenseErrorAction.FailRequest
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1.PostFlushChanges(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).18: Changes have been flushed to the bitmap, but the final bitmap has not been flipped yet.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton">
            <summary>
                A license manager can serve as a per-process (per app-domain, at least) hub for license fetching
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.aliases">
            <summary>
                Connects all variants of each license to the relevant chain
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.chains">
            <summary>
                By license id/domain, lowercaseinvariant.
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.sink">
            <summary>
                The backing sink
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.allCache">
            <summary>
                The set of all chains
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.sharedCache">
            <summary>
                The set of shared chains
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.HttpClient">
            <summary>
                The HttpClient all fetchers use
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.Clock">
            <summary>
                Source for timestamp information
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.SkipHeartbeats">
            <summary>
            Hearbeats remaining to skip before fetching
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.SkipHeartbeatsIfDiskCacheIsFresh">
            <summary>
            How many initial heartbeats to skip if the last modified date of the disk cached license is recent (under 60m old)
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.AllowFetching">
            <summary>
            License chains consult this method before firing heartbeat events on fetchers
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.TrustedKeys">
            <summary>
                Trusted public keys
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.Cache">
            <summary>
                The persistent cache for licenses
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.GetOrAdd(System.String,ImageResizer.Configuration.LicenseAccess)">
            <summary>
                Registers the license and (if relevant) signs it up for periodic updates from S3. Can also make existing private
                licenses shared.
            </summary>
            <param name="license"></param>
            <param name="access"></param>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.AddLicenseChangeHandler``1(``0,System.Action{``0,ImageResizer.Plugins.Licensing.ILicenseManager})">
            <summary>
                Adds a weak-referenced handler to the LicenseChange event. Since this is (essentially) a static event,
                weak references are important to allow listeners (and Config instances) to be garbage collected.
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="target"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.RemoveLicenseChangeHandler(ImageResizer.Plugins.Licensing.LicenseManagerEvent)">
            <summary>
                Removes the event handler created by AddLicenseChangeHandler
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="E:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.LicenseChange">
            <summary>
                When there is a material change or addition to a license chain (whether private or shared)
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.GetAsyncTasksSnapshot">
            <summary>
                Returns a snapshot of
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.WaitForTasks">
            <summary>
                Returns the number of tasks that were waited for. Does not wait for new tasks that are scheduled during execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseDetailsExtensions.GetFeatures(ImageResizer.Plugins.Licensing.ILicenseDetails)">
            <summary>
                Enumerates the feature code list. No case changes are performed
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseDetailsExtensions.GetAllDomains(ImageResizer.Plugins.Licensing.ILicenseDetails)">
            <summary>
                Enumerates any/all values from "Domain" and "Domains" field, trimming and lowercasing all values.
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseDetailsExtensions.GetValidLicenseServers(ImageResizer.Plugins.Licensing.ILicenseDetails)">
            <summary>
                Returns all valid license servers from the LicenseServers field
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseBlobExtensions.ToRedactedString(ImageResizer.Plugins.Licensing.ILicenseBlob)">
            <summary>
                Redacts the value of the 'Secret' field
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.Watermark.DistanceUnit">
            <summary>
            Represents either a number of pixels or a percentage
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.DistanceUnit.#ctor(System.Double,ImageResizer.Plugins.Watermark.DistanceUnit.Units)">
            <summary>
            Creates DistanceUnit instance based on provided floating point value and type of unit
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.DistanceUnit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.DistanceUnit.TryParse(System.String)">
            <summary>
             var a = new DistanceUnit();
             a.TryParse() 
             DistanceUnit.TryParse("3px") 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.DistanceUnit.Value">
            <summary>
            A number of pixels, or a percentage value between 0 and 100
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.ImageLayer.Path">
            <summary>
            The virtual path to the watermark image
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.ImageLayer.ImageQuery">
            <summary>
            Settings to apply to the watermark before overlaying it on the image. 
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.ImageLayer.GetMemCachedBitmap(System.String,ImageResizer.ResizeSettings,System.Boolean)">
            <summary>
            Loads or caches a bitmap, using asp.net's cache (when available)
            </summary>
            <param name="query"></param>
            <param name="virtualPath"></param>
            <param name="onlyLoadIfCacheExists">Whether to load the image when
            no cache is available.  Pass <c>true</c> for pre-fetching, and
            <c>false</c> if the image is needed immediately.</param>
            <returns>Returns the Bitmap.  If no cache is available, and
            <c>onlyLoadIfCacheExists</c> is <c>true</c>, returns <c>null</c>
            rather than loading the Bitmap.</returns>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.ImageLayer.ShouldLoadAsOriginalSize">
            <summary>
            Whether the image should be loaded in its original size.  If it can,
            it can also be pre-fetched.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Top">
            <summary>
            The offset from the top of the container. Percentages are relative to the container height. Defines the upper boundary for the layer. 
            If null, Bottom will be used to calculate the value based on the height. If Bottom is not specified, defaults to 0.
            Positive values are inside the container, negative values outside it.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Left">
            <summary>
            The offset from the left of the container. Percentages are relative to the container width. Defines the leftmost boundary for the layer. 
            If null, Right will be used to calculate the value based on the width. If Right is not specified, defaults to 0.
            Positive values are inside the container, negative values outside it.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Right">
            <summary>
            The offset relative to the right side of the container. Percentages are relative to the container width. Defines the rightmost boundary for the layer.
            If null, Top will be used to calculate the value based on the height. If Top is not specified, defaults to 0.
            Positive values are inside the container, negative values outside it.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Bottom">
            <summary>
            The offset relative to the bottom of the container. Percentages are relative to the container height. Defines the bottom-most boundary for the layer.
            If null, Top will be used to calculate the value based on the height. If Top is not specified, defaults to 0.
            Positive values are inside the container, negative values outside it.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Width">
            <summary>
            The width of the layer. If used with both Left and Right, the smaller result wins. I.e, with a 100px container, width=50, left=30, right=30, the resulting width will be 40.
            If null, Left and Right will be used to calculate the value. If both Left and Right are not specified, the natural width of the layer's contents will be used.
            Percentages are relative to the container width. 
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Height">
            <summary>
            The height of the layer. If used with both Top and Bottom, the smaller result wins. I.e, with a 100px container, height=50, top=30, top=30, the resulting height will be 40.
            If null, Top and Bottom will be used to calculate the value. If both Top and Bottom are not specified, the natural height of the layer's contents will be used.
            Percentages are relative to the container height. 
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.RelativeTo">
            <summary>
            Specifies the container that the position values (top,left,right,bottom,width,heght) are relative to. 
            The default is 'image' (the innermost square, which contains the original photo). Additional valid values include 'imageArea' (includes whitespace added to preserve aspect ratio), 'padding', 'border', 'margin', and 'canvas'. 
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Align">
            <summary>
            The alignment to use when 
            (a) all 3 horizontal or vertical values are specified, and they need to be resolved,
            (b) when only width/height are specified, 
            (c) when no positioning values are specified, or 
            (d) when the content doesn't precisely fill they layer bounds.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.Fill">
            <summary>
            (defaults false). When true, the image or text will attempt to fill 1 of the layer's bounds, even if upscaling is required. 
            When Width is not specified, and both left and right are not specified, this causes the image to fill the container width (if possible).
            When Height is not specified, and both top and bottom are not specified, this causes the image to fill the container height (if possible).
            This causes &amp;scale=both to be used on images unless another setting is specified in imageQuery.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.Layer.DrawAs">
            <summary>
            The z-order at which to draw the layer. Current options are Overlay (over everything) and Background (over the background color).
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.Layer.CalculateLayerCoordinates(ImageResizer.Resizing.ImageState,ImageResizer.Plugins.Watermark.Layer.CalculateLayerContentSize,System.Boolean)">
            <summary>
            Returns a rectangle with canvas-relative coordinates. A callback is required to calculate the actual size of the content based on the specified bounds. 
            The callback may be passed double.NaN for one or more parameters to indicate that they are not specified.
            
            </summary>
            <param name="s"></param>
            <param name="actualSizeCalculator"></param>
            <param name="forceInsideCanvas"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.Watermark.LegacyWatermarkFeatures">
            <summary>
            Provides extensibility points for drawing watermarks and even modifying resizing/image settings
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.LegacyWatermarkFeatures.GetMemCachedBitmap(System.String,System.Boolean)">
            <summary>
            Loads or caches a bitmap, using asp.net's cache (when available)
            </summary>
            <param name="virtualPath">The virtual path to the file to load.</param>
            <param name="onlyLoadIfCacheExists">Whether to load the image when
            no cache is available.  Pass <c>true</c> for pre-fetching, and
            <c>false</c> if the image is needed immediately.</param>
            <returns>Returns the Bitmap.  If no cache is available, and
            <c>onlyLoadIfCacheExists</c> is <c>true</c>, returns <c>null</c>
            rather than loading the Bitmap.</returns>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.Text">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.Vertical">
            <summary>
            If true, text will be displayed vertically
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.Angle">
            <summary>
            Angle of clockwise rotation
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.TextColor">
            <summary>
            The color to draw the text
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.OutlineWidth">
            <summary>
            The width of the text outline (OutlineColor)
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.GlowWidth">
            <summary>
            The width of the glow effect (GlowColor)
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.OutlineColor">
            <summary>
            The color of the outline
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.GlowColor">
            <summary>
            The color of the glow effect. 
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.Font">
            <summary>
            The name of the font
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.FontSize">
            <summary>
            The size of the font in pixels
            </summary>  
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.TextLayer.Style">
            <summary>
            The font style
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.TextLayer.GetFont">
            <summary>
            Sets the font for the text layer. Default is Generic Sans Serif.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.Watermark.WatermarkPlugin">
            <summary>
            Provides extensibility points for drawing watermarks and even modifying resizing/image settings
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.WatermarkPlugin.#ctor">
            <summary>
            Creates a new instance of the watermark plugin.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.WatermarkPlugin.DefaultImageQuery">
            <summary>
            Default querystring parameters for all image watermarks.
            If not specified in the watermark configuration, defaults to
            "scache=true".
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.WatermarkPlugin.OtherImages">
            <summary>
            When a &amp;watermark command does not specify a named preset, it is assumed to be a file name. 
            Set OtherImages.Path to the search folder. All watermark images (except for presets) must be in the root of the search folder. 
            The remainder of the settings affect how each watermark will be positioned and displayed.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.WatermarkPlugin.NamedWatermarks">
            <summary>
            This dictionary contains watermarks keyed by name. Values are enumerations of layers - a watermark can have multiple layers.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.WatermarkPlugin.Install(ImageResizer.Configuration.Config)">
            <summary>
            Adds the plugin to the given configuration container
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.WatermarkPlugin.Uninstall(ImageResizer.Configuration.Config)">
            <summary>
            Removes the plugin from the given configuration container
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.WatermarkPlugin.GetSupportedQuerystringKeys">
            <summary>
            Returns the querystrings command keys supported by this plugin. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Watermark.WatermarkPlugin.CreateLayerFromOtherImages(System.String)">
            <summary>
            Creates an ImageLayer for the watermark based on OtherImages, if
            it exists.  If OtherImages does not exist, the watermark should be
            treated as a legacy one.
            </summary>
            <param name="watermarkPath">The path to the watermark image.</param>
            <returns>Returns a copy of OtherImages, modified to represent the
            watermark passed in <c>watermarkPath</c>, or <c>null</c> if
            OtherImages doesn't exist.</returns>
        </member>
        <member name="P:ImageResizer.Plugins.Watermark.WatermarkPlugin.LicenseFeatureCodes">
            <summary>
            Returns the license key feature codes that are able to activate this plugins.
            </summary>
        </member>
    </members>
</doc>
